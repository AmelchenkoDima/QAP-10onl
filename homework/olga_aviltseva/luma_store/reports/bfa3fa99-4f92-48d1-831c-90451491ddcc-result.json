{"name": "test_incorrect_login_alert", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <bound method LoginPage.alert_error_displayed of <pages.login_page.LoginPage object at 0x00000268D7F95060>>()\n +    where <bound method LoginPage.alert_error_displayed of <pages.login_page.LoginPage object at 0x00000268D7F95060>> = <pages.login_page.LoginPage object at 0x00000268D7F95060>.alert_error_displayed\n +      where <pages.login_page.LoginPage object at 0x00000268D7F95060> = LoginPage(<selenium.webdriver.chrome.webdriver.WebDriver (session=\"67004de1e5060cac138a79cddfb0f58a\")>)", "trace": "fixturefunc = <function check_alert_message at 0x00000268D74843A0>, request = <FixtureRequest for <Function test_incorrect_login_alert>>\nkwargs = {'driver': <selenium.webdriver.chrome.webdriver.WebDriver (session=\"67004de1e5060cac138a79cddfb0f58a\")>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n..\\..\\..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"67004de1e5060cac138a79cddfb0f58a\")>\n\n    @then('I see alert message')\n    def check_alert_message(driver):\n>       assert LoginPage(driver).alert_error_displayed()\nE       assert False\nE        +  where False = <bound method LoginPage.alert_error_displayed of <pages.login_page.LoginPage object at 0x00000268D7F95060>>()\nE        +    where <bound method LoginPage.alert_error_displayed of <pages.login_page.LoginPage object at 0x00000268D7F95060>> = <pages.login_page.LoginPage object at 0x00000268D7F95060>.alert_error_displayed\nE        +      where <pages.login_page.LoginPage object at 0x00000268D7F95060> = LoginPage(<selenium.webdriver.chrome.webdriver.WebDriver (session=\"67004de1e5060cac138a79cddfb0f58a\")>)\n\ntests\\test_login_bdd.py:52: AssertionError"}, "description": "login.feature: incorrect login alert", "start": 1672247820282, "stop": 1672247825322, "uuid": "dff2830f-5d77-4365-a156-c2a5d4baa82d", "historyId": "0b3cfcdd9671e00e9435a310380dd7b3", "testCaseId": "eea23ee71d418ebd2cd8756e1e3eebb7", "fullName": "tests.test_login_bdd#test_incorrect_login_alert", "labels": [{"name": "story", "value": "Validation errors"}, {"name": "feature", "value": "Login"}, {"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_bdd"}, {"name": "host", "value": "Dell"}, {"name": "thread", "value": "104580-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_bdd"}]}